=====================================================================
データバリデーション
=====================================================================
入力値に対するバリデーションを追加します。

ここでは Bean Vaidation で定義されているバリデーション (NotNull、Size、Pattern など) を用いてデータのバリデーションを行います。
また、もともと英語で設定されているエラーメッセージを ValidationMesasges で上書きします。



ソースコードの修正
=====================================================================
まず、以下のファイルを新規追加します。

* ValidationMessages_ja.properties

さらに、以下のソースコードを修正します。

* Employee.java


新規追加するソースコード
---------------------------------------------------------------------

日本語のエラーメッセージを定義します。



ValidationMessage_ja の作成方法
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
ValidationMessage_ja.properties の中身は Unicode の表記です。
JBoss ツール・プロパティ・エディターを用いて作成します。


#. src/main/resources の直下に拡張子 ValidationMessages_ja.properties ファイルを新規作成します。

#. 作成したファイルを右クリックして「次で開く」から「JBoss ツール・プロパティ・エディター」を選択します。

#. 下の「プロパティ」タブを選択してプロパティの「追加」「編集」「削除」を右側のボタンで行います。

   .. image:: ./images/Validation/02_jbossEditor_01.png
      :scale: 70%

#. Unicode 表記は「ソース」タブで確認できます。

   .. image:: ./images/Validation/02_jbossEditor_02.png
      :scale: 70%

#. ソースコードを以下のように編集してください。

   ::
      
      shainData.shainId.pattern=\u793E\u54E1 ID \u306F\u3001AC000001\uFF5EAC999999 \u307E\u305F\u306F AF000001\uFF5EAF999999 \u3067\u3059\u3002
      shainData.kana.pattern=\u5168\u89D2\u30AB\u30CA\u306E\u307F\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044\u3002
      shainData.familyName.size = \u59d3\u306f {min} \u304b\u3089 {max} \u6587\u5b57\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002
      shainData.familyNameKana.size = \u30bb\u30a4\u306f {min} \u304b\u3089 {max} \u6587\u5b57\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002
      shainData.givenName.size = \u540d\u306f {min} \u304b\u3089 {max} \u6587\u5b57\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002
      shainData.givenNameKana.size = \u30e1\u30a4\u306f {min} \u304b\u3089 {max} \u6587\u5b57\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002
      shainData.email.pattern = \u6709\u52b9\u306a email \u6587\u5b57\u5217\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002
      shainData.phoneNumber.pattern = 10 \u6841\u304B\u3089 12 \u6841\u3067\u96FB\u8A71\u756A\u53F7\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044\u3002
      shainData.cellPhoneNumber.pattern = 11 \u6841\u3067\u643A\u5E2F\u96FB\u8A71\u756A\u53F7\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044\u3002
      shainData.address.size = \u6709\u52b9\u306a\u4f4f\u6240\u6587\u5b57\u5217\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002
      shainData.date.notNull = \u5fc5\u9808\u9805\u76ee\u3067\u3059\u3002
      



修正するソースコード
---------------------------------------------------------------------

Employee.java の修正
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Bean Validation を使用し上書きしたエラーメッセージを使用するようにします。
以下のように修正してください。



::
   
   package com.javadera.shainweb.model;
   // Generated 2016/01/20 13:45:58 by Hibernate Tools 4.3.1.Final
   
   import java.util.Date;
   
   import javax.persistence.Column;
   import javax.persistence.Entity;
   import javax.persistence.FetchType;
   import javax.persistence.Id;
   import javax.persistence.JoinColumn;
   import javax.persistence.ManyToOne;
   import javax.persistence.NamedQueries;
   import javax.persistence.NamedQuery;
   import javax.persistence.Table;
   import javax.persistence.Temporal;
   import javax.persistence.TemporalType;
   import javax.persistence.UniqueConstraint;
   import javax.validation.constraints.NotNull;
   import javax.validation.constraints.Pattern;
   import javax.validation.constraints.Size;
   
   /**
    * Employee generated by hbm2java
    */
   @Entity
   @Table(name = "employee", uniqueConstraints = @UniqueConstraint(columnNames = "email") )
   @NamedQueries({
       @NamedQuery(name="Employee.findAllOrderById", query="SELECT e FROM Employee e WHERE e.deleteFlag = 0 ORDER BY e.shainId"),
       @NamedQuery(name="Employee.findById",         query="SELECT e FROM Employee e WHERE e.shainId = :shainId")
   })
   public class Employee implements java.io.Serializable {
   
       /**
        *
        */
       private static final long serialVersionUID = 1L;
       private String shainId;
       private RoleMaster roleMaster;
       private String familyName;
       private String familyNameKana;
       private String givenName;
       private String givenNameKana;
       private String email;
       private String phoneNumber;
       private String cellphoneNumber;
       private String address;
       private Date joinDate;
       private Date quitDate;
       private String password;
       private Integer deleteFlag;
   
       public Employee() {
       }
   
       public Employee(String shainId, RoleMaster roleMaster, String familyName, String familyNameKana, String givenName,
               String givenNameKana, String email, String phoneNumber, String cellphoneNumber, String address,
               Date joinDate, Date quitDate, String password) {
           this.shainId = shainId;
           this.roleMaster = roleMaster;
           this.familyName = familyName;
           this.familyNameKana = familyNameKana;
           this.givenName = givenName;
           this.givenNameKana = givenNameKana;
           this.email = email;
           this.phoneNumber = phoneNumber;
           this.cellphoneNumber = cellphoneNumber;
           this.address = address;
           this.joinDate = joinDate;
           this.quitDate = quitDate;
           this.password = password;
       }
   
       public Employee(String shainId, RoleMaster roleMaster, String familyName, String familyNameKana, String givenName,
               String givenNameKana, String email, String phoneNumber, String cellphoneNumber, String address,
               Date joinDate, Date quitDate, String password, Integer deleteFlag) {
           this.shainId = shainId;
           this.roleMaster = roleMaster;
           this.familyName = familyName;
           this.familyNameKana = familyNameKana;
           this.givenName = givenName;
           this.givenNameKana = givenNameKana;
           this.email = email;
           this.phoneNumber = phoneNumber;
           this.cellphoneNumber = cellphoneNumber;
           this.address = address;
           this.joinDate = joinDate;
           this.quitDate = quitDate;
           this.password = password;
           this.deleteFlag = deleteFlag;
       }
   
       @Id
       @Column(name = "shain_id", unique = true, nullable = false, length = 20)
       @NotNull(message="{shainData.shainId.pattern}")
       @Pattern(regexp="A(F|C)[0-9]{6}", message="{shainData.shainId.pattern}")
       public String getShainId() {
           return this.shainId;
       }
   
       public void setShainId(String shainId) {
           this.shainId = shainId;
       }
   
       @ManyToOne(fetch = FetchType.EAGER)
       @JoinColumn(name = "role_id", nullable = false)
       public RoleMaster getRoleMaster() {
           return this.roleMaster;
       }
   
       public void setRoleMaster(RoleMaster roleMaster) {
           this.roleMaster = roleMaster;
       }
   
       @Column(name = "family_name", nullable = false, length = 50)
       @Size(min=1, max=20, message="{shainData.familyName.size}")
       public String getFamilyName() {
           return this.familyName;
       }
   
       public void setFamilyName(String familyName) {
           this.familyName = familyName;
       }
   
       @Column(name = "family_name_kana", nullable = false, length = 50)
       @Size(min=1, max=20, message="{shainData.familyNameKana.size}")
       @Pattern(regexp="^[\\u30A0-\\u30FF]+$", message="{shainData.kana.pattern}")
       public String getFamilyNameKana() {
           return this.familyNameKana;
       }
   
       public void setFamilyNameKana(String familyNameKana) {
           this.familyNameKana = familyNameKana;
       }
   
       @Column(name = "given_name", nullable = false, length = 50)
       @Size(min=1, max=20, message="{shainData.givenName.size}")
       public String getGivenName() {
           return this.givenName;
       }
   
       public void setGivenName(String givenName) {
           this.givenName = givenName;
       }
   
       @Column(name = "given_name_kana", nullable = false, length = 50)
       @Size(min=1, max=20, message="{shainData.givenNameKana.size}")
       @Pattern(regexp="^[\\u30A0-\\u30FF]+$", message="{shainData.kana.pattern}")
       public String getGivenNameKana() {
           return this.givenNameKana;
       }
   
       public void setGivenNameKana(String givenNameKana) {
           this.givenNameKana = givenNameKana;
       }
   
       @Column(name = "email", unique = true, nullable = false, length = 50)
       @Pattern(regexp="[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?",  message="{shainData.email.pattern}")
       public String getEmail() {
           return this.email;
       }
   
       public void setEmail(String email) {
           this.email = email;
       }
   
       @Column(name = "phone_number", nullable = false, length = 50)
       @Pattern(regexp="[0-9]{10,12}",  message="{shainData.phoneNumber.pattern}")
       public String getPhoneNumber() {
           return this.phoneNumber;
       }
   
       public void setPhoneNumber(String phoneNumber) {
           this.phoneNumber = phoneNumber;
       }
   
       @Column(name = "cellphone_number", nullable = false, length = 50)
       @Pattern(regexp="[0-9]{11}",  message="{shainData.cellPhoneNumber.pattern}")
       public String getCellphoneNumber() {
           return this.cellphoneNumber;
       }
   
       public void setCellphoneNumber(String cellphoneNumber) {
           this.cellphoneNumber = cellphoneNumber;
       }
   
       @Column(name = "address", nullable = false, length = 300)
       @Size(min=1, message="{shainData.address.size}")
       public String getAddress() {
           return this.address;
       }
   
       public void setAddress(String address) {
           this.address = address;
       }
   
       @Temporal(TemporalType.DATE)
       @Column(name = "join_date", nullable = false, length = 13)
       @NotNull(message="{shainData.date.notNull}")
       public Date getJoinDate() {
           return this.joinDate;
       }
   
       public void setJoinDate(Date joinDate) {
           this.joinDate = joinDate;
       }
   
       @Temporal(TemporalType.DATE)
       @Column(name = "quit_date", nullable = false, length = 13)
       @NotNull(message="{shainData.date.notNull}")
       public Date getQuitDate() {
           return this.quitDate;
       }
   
       public void setQuitDate(Date quitDate) {
           this.quitDate = quitDate;
       }
   
       @Column(name = "password", nullable = false)
       public String getPassword() {
           return this.password;
       }
   
       public void setPassword(String password) {
           this.password = password;
       }
   
       @Column(name = "delete_flag")
       public Integer getDeleteFlag() {
           return this.deleteFlag;
       }
   
       public void setDeleteFlag(Integer deleteFlag) {
           this.deleteFlag = deleteFlag;
       }
   }
   



動作確認
=====================================================================
修正後、デバッグ実行して社員一覧画面から「新規追加」ボタンを押下し、社員データ画面でデータを入力せず「追加」ボタンを押下してください。

バリデーションが掛かってデータ入力を促されます。

.. image:: ./images/Validation//01_validation_Ja.png
     :scale: 60%



